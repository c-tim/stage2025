# -*- coding: utf-8 -*-
"""GrandTest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11RncV4R2C2cXRjH1zEyjpNzr9u9QQqMp

# Analyse des émissions des modèles pyTorch

## Initialisation générale

### Dépendances
"""

!pip install codecarbon
!pip install git+https://github.com/MihaMarkic/tflearn.git@fix/is_sequence_missing
!pip install Pillow==9.5.0

# Modules python a importer :
# Classes
import sys
sys.path.append('../py_programs/')
sys.path.append('../testPython/')

from classEnergyAnalyzer import EnergyAnalyzer
from pyTorchModel import pyTorchModel
from classDatasets import Dataset
from CSVReader import CSVfile

# Modules
import classModelTester as Tester
import DataTools

# Librairies externes
import torchvision
import torchvision.models as ExampleModels

"""### Tests de validation"""

!rm temp.csv

!python uniTestPyTorch.py

"""### Initialisation des variables"""

analyzer = EnergyAnalyzer("testPytorch", name_output_file="./testgeneral.csv")
tempAnalyzer = EnergyAnalyzer("testTempCsv", name_output_file="./temp.csv")

'''analyzer.display_data_axis("emissions", condFilter={"project_name":"evaluate_performance_biais6"})
analyzer.display_data_axis("emissions", x_axis="Number iterations", x_col=test_iterations, condFilter={"project_name":"evaluate_performance_biais6"})
'''
trainloader = DataTools.CIFAR10.train_inputs
sampleloader = DataTools.CIFAR10.test_sample
testloader = DataTools.CIFAR10.testloader

"""## Tests générals

### Initialisation des variables de la série de tests
"""

# Le nom de la machine utilisé pour faire les tests (pas de point, virgule)
label_Machine = "CollabLinux"
analyzer.set_new_project(label_Machine)

list_model = DataTools.models.list_models(module=ExampleModels)
print([(i,list_model[i]) for i in range(len(list_model))])

"""#### liste des modèles testés"""

list_id_model = [i for i in range(1,80)]
#list_id_model = [65]
#TODO remove the incompatibles models

"""### Test : vérifier la consommation en fonction du nombre de tâches"""

!rm temp.csv

Tester.testGpu(tempAnalyzer, 5)

"""### Test : vérifier la compatibilité des modèles avec la base de donnée"""

list_worked_models = Tester.pyTorch_series_test_model_dataset_compatibility(list_id_model, trainloader, True)

"""### Test : entrainement sur une seule image pour vérifier les modèles compatibles (remplacé par summary)"""

#Tester.pyTorch_series_train_and_track_emissions(analyzer, list_id_model,testloader,label_Machine, 1, False)

!mkdir model_one_image
!mv *.pth ./model_one_image
!tar cvf model_one_image.tar model_one_image/

"""Si il n'y a pas d'erreurs dans le test ci-dessus avec la list de modeles, alors le test suivant peut être executé et ne devrait pas retourner d'erreurs

### Test : Entrainement sur la base de donnée CIRFA10
"""

number_epoch_tested = 2
Tester.pyTorch_series_train_and_track_emissions(analyzer, list_worked_models,trainloader,label_Machine, 2, False)

!mkdir model_CIRFA
!mv *.pth ./model_CIRFA
!tar cvf model_CIRFA.tar model_CIRFA/

"""## Traitement des résultats

Partie moins critique puiqu'on a les résultat, mais comme les données peuvent êtres perdus il faut tout télécharger

### Préparation pour téléchargement
"""

!mkdir csv_result
!mv *.csv csv_result
!tar cvf csv_result.tar csv_result/

"""### Retranscription des résultats

#### Conservation des résultats dans un autre fichier
"""

# les colonnes a sauver dans un autre fichier
save_columns = []

#label de la machine qui a fait les operations
label_Machine = "collab"
col_label_machine = [label_Machine for i in range(len(save_column))]

#label du type de calcul actuel
label_operation = "test"
col_label_operation = [label_operation for i in range(len(save_column))]

cols_result_analyze = analyzer.csvResult.extract_data(save_column)

resultFile =  CSVReader.create_file("./result.csv")
resultFile.add_column("label_machine", col_label_machine)
resultFile.add_column("label_operation", col_label_operation)
resultFile.add_columns(save_columns, cols_result_analyze)
